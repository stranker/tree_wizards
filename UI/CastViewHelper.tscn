[gd_scene load_steps=10 format=2]

[ext_resource path="res://UI/arrow_indicator.png" type="Texture" id=1]
[ext_resource path="res://UI/ground_indicator.png" type="Texture" id=2]
[ext_resource path="res://UI/TargetArrow.png" type="Texture" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

onready var camera : Camera = CameraSystem.current_camera

onready var arrow_cast = $ArrowCast
onready var ground_cast = $GroundCast
onready var target_cast = $TargetCast

onready var arrow = $ArrowCast/Pivot/Arrow
onready var arrow_pos = $ArrowCast/Pos
onready var ground_pos = $GroundCast/Pivot/Pos
onready var raycast = $GroundCast/Pivot/Pos/RayCast
onready var ground_circle = $GroundCast/Pivot/Pos/Circle
onready var target_pivot = $TargetCast/Pivot
onready var circle = $TargetCast/Pivot/Circle

var current_spell_type : int = -1

var current_spell_area : int = -1
var current_spell_range : int = -1

func _initialize():
	arrow_cast.visible = false
	ground_cast.visible = false
	target_cast.visible = false
	circle.visible = false
	current_spell_type = -1
	set_process(false)
	pass

func _ready():
	_initialize()
	SpellManager.connect(\"spell_info\", self, \"_on_spell_info\")
	SpellManager.connect(\"spell_casted\", self, \"_on_spell_casted\")
	SpellManager.connect(\"spell_failed\", self, \"_on_spell_failed\")
	pass

func _on_spell_failed():
	_initialize()
	pass

func _on_spell_casted(_spell):
	_initialize()
	pass

func _on_spell_info(spell_data : Dictionary):
	_initialize()
	current_spell_type = spell_data[\"spell_type\"]
	current_spell_area = spell_data[\"spell_area\"]
	current_spell_range = spell_data[\"spell_range\"]
	match current_spell_type:
		SpellManager.SpellType.Directional:
			_set_arrow_cast(spell_data[\"spell_range\"], spell_data[\"spell_area\"])
		SpellManager.SpellType.Ground:
			_set_ground_cast(spell_data[\"spell_range\"], spell_data[\"spell_area\"])
		SpellManager.SpellType.Target:
			_set_target_cast(spell_data[\"spell_range\"], spell_data[\"spell_area\"])
	set_process(true)
	pass

func _set_arrow_cast(spell_range, spell_area):
	arrow_cast.visible = true
	arrow.scale.x = spell_range
	arrow.scale.y = spell_area
	arrow.transform.origin.x = spell_range * 0.5
	pass

func _set_ground_cast(spell_range, spell_area):
	ground_cast.visible = true
	ground_pos.transform.origin.z = spell_range
	ground_circle.scale = Vector3.ONE * spell_area
	pass

func _set_target_cast(spell_range, spell_area):
	_set_ground_cast(spell_range, spell_area)
	pass

func _process(delta):
	match current_spell_type:
		SpellManager.SpellType.Ground: 
			_ground_behavior()
		SpellManager.SpellType.Directional:
			_directional_behavior()
		SpellManager.SpellType.Target:
			_target_behavior()
			_ground_behavior()
	pass

func _ground_behavior():
	if raycast.is_colliding():
		ground_circle.global_transform.origin = raycast.get_collision_point() + Vector3(0,0.015,0)
	pass

func _directional_behavior():
	pass

func _target_behavior():
	var enemy : Spatial = GameManager.wizard.current_enemy
	if enemy:
		if is_enemy_on_range(enemy, current_spell_area if current_spell_range == 0 else current_spell_range):
			circle.visible = true
			target_pivot.global_transform.origin = enemy.global_transform.origin
			var circle_pos = camera.unproject_position(enemy.get_head_pos())
			circle.rect_global_position = circle_pos
		else:
			circle.visible = false
	pass

func get_spell_pos():
	match current_spell_type:
		SpellManager.SpellType.Directional:
			return arrow_pos.global_transform.origin
		SpellManager.SpellType.Ground:
			return ground_pos.global_transform.origin
		SpellManager.SpellType.Target:
			return target_pivot.global_transform.origin

func is_enemy_on_range(enemy : Spatial, spell_range : float):
	return enemy.global_transform.origin.distance_to(global_transform.origin) <= spell_range * 0.5
"

[sub_resource type="SpatialMaterial" id=2]
flags_transparent = true
flags_unshaded = true
flags_do_not_receive_shadows = true
flags_disable_ambient_light = true
vertex_color_use_as_albedo = true
albedo_color = Color( 0.898039, 0, 1, 0.509804 )
albedo_texture = ExtResource( 1 )

[sub_resource type="QuadMesh" id=3]

[sub_resource type="SpatialMaterial" id=4]
flags_transparent = true
flags_unshaded = true
flags_do_not_receive_shadows = true
flags_disable_ambient_light = true
vertex_color_use_as_albedo = true
albedo_color = Color( 0.898039, 0, 1, 0.509804 )
albedo_texture = ExtResource( 2 )
uv1_scale = Vector3( 2, 2, 2 )

[sub_resource type="CylinderMesh" id=5]
material = SubResource( 4 )
top_radius = 0.5
bottom_radius = 0.5
height = 0.001
rings = 3

[sub_resource type="Animation" id=6]
resource_name = "Idle"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Icon:rect_position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 0.5, 2 ),
"update": 0,
"values": [ Vector2( -20, -40 ), Vector2( -20, -55 ) ]
}

[node name="CastViewHelper" type="Spatial"]
script = SubResource( 1 )

[node name="ArrowCast" type="Spatial" parent="."]

[node name="Pivot" type="Spatial" parent="ArrowCast"]
transform = Transform( -1.62921e-07, 0, -1, 0, 1, 0, 1, 0, -1.62921e-07, 0, 0, 0 )

[node name="Arrow" type="MeshInstance" parent="ArrowCast/Pivot"]
transform = Transform( 2, 2.98023e-08, 1.3027e-15, 0, -4.37114e-08, 1, 5.96046e-08, -1, -4.37114e-08, 1, 0.015, 0 )
material_override = SubResource( 2 )
cast_shadow = 0
mesh = SubResource( 3 )
material/0 = null

[node name="Pos" type="Position3D" parent="ArrowCast"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.7, 0.5 )

[node name="GroundCast" type="Spatial" parent="."]

[node name="Pivot" type="Spatial" parent="GroundCast"]

[node name="Pos" type="Position3D" parent="GroundCast/Pivot"]

[node name="RayCast" type="RayCast" parent="GroundCast/Pivot/Pos"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.6922, 0 )
enabled = true
cast_to = Vector3( 0, -10, 0 )
collision_mask = 8

[node name="Circle" type="MeshInstance" parent="GroundCast/Pivot/Pos"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0539825, 0 )
mesh = SubResource( 5 )
material/0 = null

[node name="TargetCast" type="Spatial" parent="."]

[node name="Pivot" type="Spatial" parent="TargetCast"]

[node name="Circle" type="Control" parent="TargetCast/Pivot"]
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Anim" type="AnimationPlayer" parent="TargetCast/Pivot/Circle"]
autoplay = "Idle"
anims/Idle = SubResource( 6 )

[node name="Icon" type="TextureRect" parent="TargetCast/Pivot/Circle"]
self_modulate = Color( 0.901961, 0.12549, 0.12549, 1 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -18.0
margin_top = -40.0
margin_right = 18.0
margin_bottom = -4.0
texture = ExtResource( 3 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}
