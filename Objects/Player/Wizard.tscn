[gd_scene load_steps=16 format=2]

[ext_resource path="res://GUI/GUI.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/Sprites/ArrowCircle.png" type="Texture" id=3]
[ext_resource path="res://Objects/Player/wizard.vox" type="ArrayMesh" id=5]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody

enum PlayerState {IDLE, RUN, FALL, DASH, LAST}
enum VisualState {NORMAL, LOCK_TO_TARGET, LAST}

export (PlayerState) var player_state = PlayerState.FALL
export (VisualState) var visual_state = VisualState.NORMAL

export var velocity : Vector3
export var run_speed : float = 5
export var dash_speed : float = 20
export var rotation_speed : float = 15
export var enemy_rotation_speed : float = 20
const gravity : int = 200
export var dash_cooldown : float = 0.5
onready var spell_position : Position3D = $Visual/SpellPos

var movement_dir : Vector3
var rotation_dir : Vector2
var is_moving : bool = false
var is_dashing : bool = false
var can_dash : bool = true

var visual_dir : Vector3
var keyboard_movement : Vector2 = Vector2.ZERO

var spell_dir : Vector3

var new_anim = \"\"
var anim = \"\"

var pos : Vector3 = Vector3.ZERO

var current_enemy = null

func _ready():
	set_physics_process(true)
	WizardStatsManager.connect(\"on_level_up\",self, \"_update_stats\")
	_update_stats()
	$DashCooldown.wait_time = dash_cooldown
	pass

func _update_stats():
	run_speed = WizardStatsManager.base_movement_speed
	pass

func _state_machine(delta):
	Debug.set_player_state(player_state)
	match player_state:
		PlayerState.IDLE:_idle_state()
		PlayerState.RUN:_run_state()
		PlayerState.FALL:_fall_state(delta)
		PlayerState.DASH:_dash_state()
	pass

func _idle_state():
	_movement()
	if is_running():
		player_state = PlayerState.RUN
	if !is_on_floor():
		if velocity.y > 0.1:
			player_state = PlayerState.JUMP
		if velocity.y < -0.1:
			player_state = PlayerState.FALL
	pass

func _run_state():
	_movement()
	if !is_running():
		player_state = PlayerState.IDLE
	if !is_on_floor() and velocity.y > 0.1:
		player_state = PlayerState.JUMP
	pass

func _jump_state(delta):
	apply_gravity(delta)
	if velocity.y < -0.1 and !is_on_floor():
		player_state = PlayerState.FALL
	pass

func _fall_state(delta):
	apply_gravity(delta)
	if is_on_floor():
		player_state = PlayerState.IDLE
	pass

func _dash_state():
	is_dashing = true
	velocity.y = 0
	_movement()
	pass

func dash():
	if is_dashing or !can_dash:
		return
	can_dash = false
	player_state = PlayerState.DASH
	$DashTimer.start()
	$DashCooldown.start()
	pass

func _on_DashTimer_timeout():
	is_dashing = false
	if is_on_floor():
		player_state = PlayerState.IDLE
	else:
		player_state = PlayerState.FALL
	pass # Replace with function body.
	
	
func _on_DashCooldown_timeout():
	can_dash = true
	pass # Replace with function body.

func _movement():
	movement_dir = get_forward()
	spell_dir = get_spell_direction()
	var current_speed = 0
	if is_moving:
		current_speed = run_speed
	if is_dashing:
		current_speed = dash_speed
	velocity.x = movement_dir.x * current_speed
	velocity.z = movement_dir.z * current_speed
	pass

func is_running():
	return abs(velocity.x) > 0.1 or abs(velocity.z) > 0.1

func _physics_process(delta):
	_state_machine(delta)
	move_and_slide(velocity, Vector3.UP)
	rotation.y = _lerp_angle(rotation.y, rotation_dir.angle(), delta * rotation_speed)
	pass

func apply_gravity(delta):
	velocity.y -= gravity * delta

func _process(delta):
	_input_check()
	_visual_state(delta)
	_animation_update()
	$Visual/WalkingDust.emitting = is_running()
	pass

func _visual_state(delta):
	$Visual/EnemyCast.cast_to = $MovementCast.cast_to
	Debug.set_visual_state(visual_state)
	match visual_state:
		VisualState.NORMAL:_visual_normal(delta)
		VisualState.LOCK_TO_TARGET:_visual_lock_to_target(delta)
	pass

func _visual_normal(delta):
	$Visual.rotation.y = _lerp_angle($Visual.rotation.y, visual_dir.y, delta * rotation_speed)
	pass

func _visual_lock_to_target(delta):
	_lock_to_target(current_enemy)
	$Visual.rotation.y = _lerp_angle($Visual.rotation.y, -rotation.y + Vector2(visual_dir.z,visual_dir.x).angle(), delta * enemy_rotation_speed)
	pass

func _lock_to_target(target):
	visual_dir = (target.global_transform.origin - transform.origin).normalized()
	pass

func _animation_update():
	if is_moving:
		new_anim = \"Walk\"
	else:
		new_anim = \"Idle\"
	if $Visual/Anim.current_animation != new_anim:
		anim = new_anim
		$Visual/Anim.play(anim)
	pass

func get_forward():
	return transform.basis.z

func _lerp_angle(from, to, weight):
	return from + _short_angle_dist(from, to) * weight

func _short_angle_dist(from, to):
	var max_angle = PI * 2
	var difference = fmod(to - from, max_angle)
	return fmod(2 * difference, max_angle) - difference

func _set_joystick_force(force):
	is_moving = force != Vector2.ZERO
	rotation_dir = force if is_moving else rotation_dir
	pass

func _input_check():
	if GameManager.is_android_device:
		return
	keyboard_movement = Vector2.ZERO
	_set_joystick_force(Vector2.ZERO)
	if Input.is_action_pressed(\"ui_left\"):
		keyboard_movement.x = -1
	if Input.is_action_pressed(\"ui_right\"):
		keyboard_movement.x = 1
	if Input.is_action_pressed(\"ui_up\"):
		keyboard_movement.y = 1
	if Input.is_action_pressed(\"ui_down\"):
		keyboard_movement.y = -1
	if Input.is_action_just_pressed(\"dash\"):
		dash()
	_set_joystick_force(keyboard_movement)
	pass

func get_spell_pos():
	return spell_position.global_transform.origin

func get_spell_direction():
	return $Visual.global_transform.basis.z

func _on_GUI_on_dash_pressed():
	dash()
	pass # Replace with function body.

func _on_GUI_on_joystick_force(force):
	_set_joystick_force(force)
	pass # Replace with function body.

func _on_EnemyDetection_on_current_enemy(enemy):
	current_enemy = enemy
	visual_state = VisualState.LOCK_TO_TARGET if current_enemy else VisualState.NORMAL
	pass # Replace with function body.
"

[sub_resource type="SpatialMaterial" id=2]
flags_transparent = true
flags_unshaded = true
flags_do_not_receive_shadows = true
flags_disable_ambient_light = true
vertex_color_use_as_albedo = true
albedo_texture = ExtResource( 3 )

[sub_resource type="QuadMesh" id=3]
material = SubResource( 2 )
flip_faces = true

[sub_resource type="Animation" id=4]
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Skin/Mesh:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 90, 0 ) ]
}

[sub_resource type="Animation" id=5]
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Skin/Mesh:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 10, 90, 0 ), Vector3( -10, 90, 0 ) ]
}

[sub_resource type="SpatialMaterial" id=6]
flags_transparent = true
flags_unshaded = true
flags_do_not_receive_shadows = true
flags_disable_ambient_light = true
vertex_color_use_as_albedo = true
albedo_color = Color( 1, 1, 1, 0.882353 )

[sub_resource type="CubeMesh" id=7]
material = SubResource( 6 )
size = Vector3( 0.1, 0.1, 0.1 )

[sub_resource type="Curve" id=8]
_data = [ Vector2( 0, 0.994318 ), 0.0, 0.0, 0, 0, Vector2( 1, 0.0306818 ), -0.342015, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=9]
offsets = PoolRealArray( 0, 0.463576, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0.827815, 1, 1, 1, 0 )

[sub_resource type="SphereShape" id=10]
radius = 0.41

[sub_resource type="GDScript" id=11]
script/source = "extends Area

var enemies_detected : Array = []
var current_enemy : KinematicBody = null

signal on_current_enemy(enemy)

func _on_EnemyDetection_body_entered(enemy):
	if enemy.is_in_group(\"Enemy\"):
		if !enemies_detected.has(enemy):
			enemies_detected.append(enemy)
		if !current_enemy:
			current_enemy = enemy
			current_enemy.set_select(true)
			emit_signal(\"on_current_enemy\", current_enemy)
	pass # Replace with function body.

func _on_EnemyDetection_body_exited(enemy):
	if enemy.is_in_group(\"Enemy\"):
		if enemies_detected.has(enemy):
			enemies_detected.erase(enemy)
		if enemies_detected.empty():
			current_enemy.set_select(false)
			current_enemy = null
			emit_signal(\"on_current_enemy\", current_enemy)
	pass # Replace with function body.

func _process(delta):
	_check_closest_enemy()
	pass

func distance_to(target : Spatial):
	return global_transform.origin.distance_to(target.global_transform.origin)

func _check_closest_enemy():
	if enemies_detected.empty():
		return
	var closest_enemy = null
	var min_distance = distance_to(current_enemy)
	for enemy in enemies_detected:
		if enemy != current_enemy:
			var distance = distance_to(enemy)
			if  distance < min_distance:
				min_distance = distance
				closest_enemy = enemy
	if current_enemy != closest_enemy and closest_enemy:
		current_enemy.set_select(false)
		current_enemy = closest_enemy
		current_enemy.set_select(true)
		emit_signal(\"on_current_enemy\", current_enemy)
	pass
"

[sub_resource type="SphereShape" id=12]
radius = 12.0

[node name="Wizard" type="KinematicBody" groups=[
"Player",
]]
collision_mask = 14
script = SubResource( 1 )
rotation_speed = 10.0

[node name="MovementCast" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.25, 0 )
enabled = true
cast_to = Vector3( 0, 0, 2 )
__meta__ = {
"_editor_description_": ""
}

[node name="Visual" type="Spatial" parent="."]

[node name="Skin" type="Spatial" parent="Visual"]

[node name="Mesh" type="MeshInstance" parent="Visual/Skin"]
transform = Transform( -4.37114e-08, 0.173648, 0.984808, 0, 0.984808, -0.173648, -1, -7.5904e-09, -4.30473e-08, 0, 0, 0 )
mesh = ExtResource( 5 )
material/0 = null

[node name="Arrow" type="MeshInstance" parent="Visual/Skin"]
transform = Transform( -2.93257e-07, 1.8, 4.37114e-08, 0, -7.86805e-08, 1, 1.8, 2.93257e-07, 7.12149e-15, 0, 0.0470077, 0.601749 )
mesh = SubResource( 3 )
material/0 = null
__meta__ = {
"_editor_description_": ""
}

[node name="EnemyCast" type="RayCast" parent="Visual"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0 )
enabled = true
cast_to = Vector3( 0, 0, 1 )
__meta__ = {
"_editor_description_": ""
}

[node name="Anim" type="AnimationPlayer" parent="Visual"]
autoplay = "Idle"
anims/Idle = SubResource( 4 )
anims/Walk = SubResource( 5 )

[node name="WalkingDust" type="CPUParticles" parent="Visual"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0.12734, -0.720781 )
cast_shadow = 0
emitting = false
amount = 12
lifetime = 2.0
randomness = 1.0
lifetime_randomness = 0.5
local_coords = false
mesh = SubResource( 7 )
emission_shape = 3
emission_points = PoolVector3Array( -0.442967, -0.0507014, 0.14251, -0.286709, 0.0363602, 0.130668, -0.400888, -0.00635691, -0.113312, -0.246584, 0.0153767, 0.149695, -0.318793, 0.035655, 0.0149778, -0.329327, 0.0297147, -0.0862136, -0.42228, 0.0397747, -0.0571296, -0.41801, -0.048882, 0.193152, -0.368727, 0.047398, 0.100737, -0.430744, 0.0190734, 0.140851, -0.424441, 0.0163286, -0.0471706, -0.326575, -0.0256334, -0.158496, -0.431621, -0.0374855, 0.113508, -0.293301, 0.0246388, -0.039595, -0.250512, 0.00346267, 0.158368, -0.295813, 0.0289752, -0.156752 )
flag_align_y = true
spread = 0.0
flatness = 1.0
gravity = Vector3( 0, 0.7, 0 )
initial_velocity_random = 1.0
scale_amount = 1.5
scale_amount_random = 1.0
scale_amount_curve = SubResource( 8 )
color_ramp = SubResource( 9 )
hue_variation = 0.99

[node name="SpellPos" type="Position3D" parent="Visual"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.565898, 0.805125 )

[node name="GUI" parent="." instance=ExtResource( 1 )]

[node name="CapsuleCollider" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 0.4, 0 )
shape = SubResource( 10 )

[node name="EnemyDetection" type="Area" parent="."]
collision_layer = 64
collision_mask = 2
script = SubResource( 11 )

[node name="CollisionShape" type="CollisionShape" parent="EnemyDetection"]
shape = SubResource( 12 )

[node name="DashTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="DashCooldown" type="Timer" parent="."]
wait_time = 0.5
one_shot = true
[connection signal="on_dash_pressed" from="GUI" to="." method="_on_GUI_on_dash_pressed"]
[connection signal="on_joystick_force" from="GUI" to="." method="_on_GUI_on_joystick_force"]
[connection signal="body_entered" from="EnemyDetection" to="EnemyDetection" method="_on_EnemyDetection_body_entered"]
[connection signal="body_exited" from="EnemyDetection" to="EnemyDetection" method="_on_EnemyDetection_body_exited"]
[connection signal="on_current_enemy" from="EnemyDetection" to="." method="_on_EnemyDetection_on_current_enemy"]
[connection signal="timeout" from="DashTimer" to="." method="_on_DashTimer_timeout"]
[connection signal="timeout" from="DashCooldown" to="." method="_on_DashCooldown_timeout"]
